AWSTemplateFormatVersion: "2010-09-09"
Description: create Frontend Infra

Parameters:
  Env:
    Type: String
    AllowedValues:
      - dev
    Default: dev
  ProjectName:
    Type: String
    Default: test

Resources:
  # ------------------------------------------------------------#
  #  S3 Bucket
  # ------------------------------------------------------------#
  FrontendContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Env}-${ProjectName}-frontend-content
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref FrontendContentAccesslogsBucket
        LogFilePrefix: !Sub ${Env}

  FrontendContentAccesslogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      BucketName: !Sub ${Env}-${ProjectName}-frontend-content-accesslogs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: AutoDelete
            Status: Enabled
            ExpirationInDays: 90
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WaflogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      BucketName: !Sub aws-waf-logs-${Env}-${ProjectName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: AutoDelete
            Status: Enabled
            ExpirationInDays: 90
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # to allow access from CloudFront OAC
  FrontendContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendContentBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service:
                - cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${FrontendContentBucket}/*
            Condition:
              StringEquals:
                AWS:SourceArn:
                  - !Join
                    - /
                    - - !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution
                      - !Ref CloudFrontDistribution

  # ------------------------------------------------------------#
  #  WAF v2
  # ------------------------------------------------------------#
  WebAcl:
    Type: AWS::WAFv2::WebACL
    Properties: 
      Name: !Sub ${Env}-web-acl
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        SampledRequestsEnabled: true
        MetricName: !Sub ${Env}-web-acl
      Rules:
        -
          Name: AWS-AWSManagedRulesCommonRuleSet
          Priority: 1
          Statement:
            RuleGroupReferenceStatement:
              Arn: !GetAtt RuleGroup.Arn
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            SampledRequestsEnabled: true
            MetricName: AWS-AWSManagedRulesCommonRuleSet

  RuleGroup:
    Type: AWS::WAFv2::RuleGroup
    Properties:
      Capacity: 10
      Name: !Sub "${Env}-RateRestrictionRuleGroup"
      Rules:
        - Action:
            Block: {}
          Name: !Sub "${Env}-RateRestrictionRule"
          Priority: 0
          Statement:
            RateBasedStatement:
              AggregateKeyType: IP
              Limit: 100
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: !Sub "${Env}-RateRestrictionRule"
            SampledRequestsEnabled: true
      Scope: CLOUDFRONT
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: !Sub "${Env}-RateRestrictionRuleGroup"
        SampledRequestsEnabled: true

  WafLogConfig:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      LogDestinationConfigs:
        - !GetAtt WaflogsBucket.Arn
      ResourceArn: !GetAtt WebAcl.Arn

  # ------------------------------------------------------------#
  #  CloudFront Functions
  # ------------------------------------------------------------#
  FrontendBasicAuthFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: FrontendBasicAuth
      AutoPublish: true
      FunctionConfig:
        Comment: FrontendBasicAuth
        Runtime: cloudfront-js-1.0
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var headers = request.headers;

          // echo -n user:pass | base64
          var authUser = "nohara";
          var authPass = "nohara-1234";
          var tmp = authUser + ':' + authPass;
          var authString = 'Basic ' + tmp.toString('base64');

          if (
            typeof headers.authorization === "undefined" ||
            headers.authorization.value !== authString
          ) {
            return {
              statusCode: 401,
              statusDescription: "Unauthorized",
              headers: { "www-authenticate": { value: "Basic" } }
            };
          }

          return request;
        }
        
  # ------------------------------------------------------------#
  #  CloudFront
  # ------------------------------------------------------------#
    # CachePolicy
  # CloudFrontCachePolicy:
  #   Type: AWS::CloudFront::CachePolicy
  #   Properties: 
  #     CachePolicyConfig: 
  #       DefaultTTL: 0
  #       MaxTTL: 0
  #       MinTTL: 0
  #       Name: BaseCachePolicyConfig
  #       ParametersInCacheKeyAndForwardedToOrigin: 
  #         CookiesConfig:
  #           CookieBehavior: none
  #         EnableAcceptEncodingGzip: false
  #         HeadersConfig:
  #           HeaderBehavior: none
  #         QueryStringsConfig:
  #           QueryStringBehavior: none

  # Origin Access Control(OAC)
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: !Sub OAC for ${Env}-frontend-content
        Name: !Sub ${Env}-origin-access-control
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCachingMinTTL: 10
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 10
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: !Sub S3origin-${FrontendContentBucket}
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 #CachingOptimized
          # CachePolicyId: !Ref CloudFrontCachePolicy
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt FrontendBasicAuthFunction.FunctionARN
        Enabled: true
        HttpVersion: http2and3
        Logging:
          IncludeCookies: false
          Bucket: !Sub ${FrontendContentAccesslogsBucket}.s3-${AWS::Region}.amazonaws.com
          Prefix: cloudfront
        Origins:
          - Id: !Sub S3origin-${FrontendContentBucket}
            DomainName: !GetAtt FrontendContentBucket.RegionalDomainName
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ""
        PriceClass: PriceClass_All
        WebACLId: !GetAtt WebAcl.Arn

Outputs:
  FrontendContentBucket:
    Value: !Ref FrontendContentBucket
  FrontendContentBucketPolicy:
    Value: !Ref FrontendContentBucketPolicy
  FrontendContentAccesslogsBucket:
    Value: !Ref FrontendContentAccesslogsBucket
  CloudFrontDistribution:
    Value: !Ref CloudFrontDistribution
  CloudFrontOriginAccessControl:
    Value: !Ref CloudFrontOriginAccessControl
